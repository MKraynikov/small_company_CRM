version: '3.8'

services:

  postgres:
    image: "postgres:15-alpine"
    restart: on-failure
    volumes:
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - db_data:/var/lib/postgresql/data/
    env_file:
      - .env.docker
    ports:
      - "5432"
    networks:
      - "backend-data"

  admin_backend:
    build: ./admin
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    expose:
      - 8000
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    env_file:
      - .env.docker
    networks:
      - "backend-data"

  api_backend:
    build: ./backend
    expose:
      - 8080
    env_file:
      - .env.docker
    networks:
      - "backend-data"


  elasticsearch:
    image: "elasticsearch:7.17.8"
    restart: unless-stopped
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data/
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
      - "xpack.security.enabled=false"
      - "USE_SSL=false"
    env_file:
      - ./.env.docker
    ports:
      - "9200"
      - "9300"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cat/health"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks:
      - "backend-data"

  redis:
    image: "redis:7.0.2-alpine"
    restart: on-failure
    ports:
      - "6379"
    networks:
      - "backend-data"

  nginx:
    build: ./infrastructure/nginx
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    ports:
      - "8086:80"
    networks:
      - "backend-data"
      - "frontend-data"

volumes:
  db_data: {}
  elasticsearch_data: {}
  static_volume: {}
  media_volume: {}

networks:
  backend-data: {}
  frontend-data: {}
